#!/usr/bin/env node
require('dotenv').config();
const { Client } = require('pg');
const http = require('http');
const fs = require('fs');
const path = require('path');

class UniversalTudushkaTest {
  constructor() {
    this.startTime = Date.now();
    this.stage = 'early'; // early, feature, production
    this.serverProcess = null;
    
    // Results structure for all stages
    this.results = {
      // Early Stage Tests
      database: { status: 'pending', details: '', time: 0 },
      server: { status: 'pending', details: '', time: 0 },
      staticFiles: { status: 'pending', details: '', time: 0 },
      healthEndpoint: { status: 'pending', details: '', time: 0 },
      environment: { status: 'pending', details: '', time: 0 },
      security: { status: 'pending', details: '', time: 0 },
      frontend: { status: 'pending', details: '', time: 0 },
      
      // Feature Stage Tests
      authentication: { status: 'pending', details: '', time: 0 },
      tasksCrud: { status: 'pending', details: '', time: 0 },
      aiIntegration: { status: 'pending', details: '', time: 0 },
      fileSystem: { status: 'pending', details: '', time: 0 },
      
      // Production Stage Tests
      loadTesting: { status: 'pending', details: '', time: 0 },
      securityScan: { status: 'pending', details: '', time: 0 },
      deployment: { status: 'pending', details: '', time: 0 }
    };
    
    this.metrics = {
      serverStartTime: 0,
      dbResponseTime: 0,
      apiResponseTime: 0,
      avgApiTime: 0,
      memoryUsage: 0
    };
  }

  async run() {
    console.log('üß™ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–£–î–£–®–ö–ê');
    console.log('===================================\n');

    try {
      // 1. Detect project stage
      await this.detectProjectStage();
      console.log(`üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞–¥–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${this.getStageDisplayName()}\n`);

      // 2. Run appropriate tests based on stage
      await this.runStageTests();

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    } finally {
      await this.cleanup();
      this.printDetailedReport();
    }
  }

  async detectProjectStage() {
    const checks = {
      hasDatabase: await this.checkDatabaseConnection(),
      hasBasicServer: this.checkFileExists('backend/server.js'),
      hasRoutes: this.checkFileExists('backend/routes/auth.js') && 
                 this.checkFileExists('backend/routes/tasks.js'),
      hasModels: this.checkFileExists('backend/models/User.js'),
      hasAI: this.checkFileExists('backend/routes/ai.js'),
      hasFiles: this.checkFileExists('backend/routes/files.js'),
      hasFrontendModules: this.checkFileExists('frontend/js/modules/tasks.js'),
      hasProductionConfig: process.env.NODE_ENV === 'production' || 
                          this.checkFileExists('nginx.conf') ||
                          process.env.FRONTEND_URL && !process.env.FRONTEND_URL.includes('localhost')
    };

    // Determine stage based on available features
    if (checks.hasProductionConfig && checks.hasAI && checks.hasFiles) {
      this.stage = 'production';
    } else if (checks.hasRoutes && checks.hasModels && (checks.hasAI || checks.hasFiles)) {
      this.stage = 'feature';
    } else {
      this.stage = 'early';
    }
  }

  async runStageTests() {
    switch (this.stage) {
      case 'production':
        await this.runProductionTests();
        break;
      case 'feature':
        await this.runFeatureTests();
        break;
      default:
        await this.runEarlyStageTests();
    }
  }

  async runEarlyStageTests() {
    console.log('üîß –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–∞–Ω–Ω–µ–π —Å—Ç–∞–¥–∏–∏...\n');
    
    await this.testEnvironment();
    await this.testDatabase();
    await this.startTestServer();
    
    if (this.results.server.status === 'success') {
      await this.sleep(2000);
      await this.testStaticFiles();
      await this.testHealthEndpoint();
      await this.testFrontend();
      await this.testSecurity();
    }
  }

  async runFeatureTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...\n');
    
    // Run early stage tests first
    await this.runEarlyStageTests();
    
    // Add feature-specific tests
    if (this.results.server.status === 'success') {
      await this.testAuthentication();
      await this.testTasksCrud();
      await this.testAIIntegration();
      await this.testFileSystem();
    }
  }

  async runProductionTests() {
    console.log('üè≠ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–Ω —Ç–µ—Å—Ç–æ–≤...\n');
    
    // Run feature tests first
    await this.runFeatureTests();
    
    // Add production-specific tests
    await this.testLoadPerformance();
    await this.testSecurityScan();
    await this.testDeploymentReadiness();
  }

  // ============= EARLY STAGE TESTS =============

  async testEnvironment() {
    const start = Date.now();
    try {
      const requiredVars = ['DATABASE_URL', 'PORT', 'JWT_SECRET'];
      const optionalVars = ['TELEGRAM_BOT_TOKEN', 'PERPLEXITY_API_KEY'];
      
      const missing = requiredVars.filter(v => !process.env[v]);
      const missingOptional = optionalVars.filter(v => !process.env[v]);
      
      const warnings = [];
      if (missing.length > 0) {
        warnings.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missing.join(', ')}`);
      }
      if (missingOptional.length > 0) {
        warnings.push(`–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ: ${missingOptional.join(', ')}`);
      }

      this.results.environment = {
        status: missing.length === 0 ? (missingOptional.length === 0 ? 'success' : 'warning') : 'error',
        details: warnings.length === 0 ? '–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' : warnings.join('; '),
        time: Date.now() - start
      };
    } catch (error) {
      this.results.environment = {
        status: 'error',
        details: error.message,
        time: Date.now() - start
      };
    }
  }

  async testDatabase() {
    const start = Date.now();
    try {
      if (!process.env.DATABASE_URL) {
        throw new Error('DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      }

      const client = new Client({ connectionString: process.env.DATABASE_URL });
      await client.connect();
      
      const result = await client.query('SELECT NOW() as current_time');
      this.metrics.dbResponseTime = Date.now() - start;
      
      // Check tables
      const tablesQuery = `
        SELECT table_name FROM information_schema.tables 
        WHERE table_schema = 'public' ORDER BY table_name;
      `;
      const tablesResult = await client.query(tablesQuery);
      const tableNames = tablesResult.rows.map(row => row.table_name);
      
      const expectedTables = ['users', 'tasks', 'task_attachments', 'ai_chats', 'ai_messages', 'usage_stats'];
      const existingTables = expectedTables.filter(table => tableNames.includes(table));
      
      await client.end();

      if (existingTables.length === 0) {
        this.results.database = {
          status: 'warning',
          details: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK, –Ω–æ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã (–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏)',
          time: this.metrics.dbResponseTime
        };
      } else if (existingTables.length < expectedTables.length) {
        this.results.database = {
          status: 'warning',
          details: `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK, –Ω–∞–π–¥–µ–Ω–æ ${existingTables.length}/${expectedTables.length} —Ç–∞–±–ª–∏—Ü`,
          time: this.metrics.dbResponseTime
        };
      } else {
        this.results.database = {
          status: 'success',
          details: `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –≤—Å–µ ${existingTables.length} —Ç–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω—ã`,
          time: this.metrics.dbResponseTime
        };
      }
    } catch (error) {
      this.results.database = {
        status: 'error',
        details: error.message,
        time: Date.now() - start
      };
    }
  }

  async startTestServer() {
    const start = Date.now();
    try {
      const { spawn } = require('child_process');
      this.serverProcess = spawn('node', ['backend/server.js'], {
        stdio: 'pipe',
        env: { ...process.env, NODE_ENV: 'test' }
      });

      await this.waitForServer();
      this.metrics.serverStartTime = Date.now() - start;

      this.results.server = {
        status: 'success',
        details: `Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${process.env.PORT || 3001}`,
        time: this.metrics.serverStartTime
      };
    } catch (error) {
      this.results.server = {
        status: 'error',
        details: error.message,
        time: Date.now() - start
      };
    }
  }

  async testStaticFiles() {
    const start = Date.now();
    try {
      const frontendPort = process.env.FRONTEND_PORT || 3000;
      const indexResponse = await this.makeRequest(`http://localhost:${frontendPort}/`, 'GET');
      
      const frontendPath = path.join(__dirname, 'frontend', 'index.html');
      const indexExists = fs.existsSync(frontendPath);
      
      if (indexExists && indexResponse.statusCode === 200) {
        this.results.staticFiles = {
          status: 'success',
          details: `Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${frontendPort}`,
          time: Date.now() - start
        };
      } else {
        this.results.staticFiles = {
          status: 'warning',
          details: 'Frontend —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç',
          time: Date.now() - start
        };
      }
    } catch (error) {
      this.results.staticFiles = {
        status: 'warning',
        details: '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
        time: Date.now() - start
      };
    }
  }

  async testHealthEndpoint() {
    const start = Date.now();
    try {
      const port = process.env.PORT || 3001;
      const response = await this.makeRequest(`http://localhost:${port}/api/health`, 'GET');
      this.metrics.apiResponseTime = Date.now() - start;

      if (response.statusCode === 200) {
        const data = JSON.parse(response.body);
        this.results.healthEndpoint = {
          status: data.status === 'OK' ? 'success' : 'warning',
          details: `Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç (${response.statusCode})`,
          time: this.metrics.apiResponseTime
        };
      } else {
        this.results.healthEndpoint = {
          status: 'error',
          details: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: ${response.statusCode}`,
          time: this.metrics.apiResponseTime
        };
      }
    } catch (error) {
      this.results.healthEndpoint = {
        status: 'error',
        details: error.message,
        time: Date.now() - start
      };
    }
  }

  async testFrontend() {
    const start = Date.now();
    try {
      const frontendPath = path.join(__dirname, 'frontend');
      const basicFiles = ['index.html', 'css/main.css', 'js/app.js'];
      const moduleFiles = ['js/modules/tasks.js', 'js/modules/ai-chat.js'];
      
      const missingBasic = basicFiles.filter(file => !fs.existsSync(path.join(frontendPath, file)));
      const existingModules = moduleFiles.filter(file => fs.existsSync(path.join(frontendPath, file)));

      let status = 'success';
      let details = '';

      if (missingBasic.length > 0) {
        status = 'error';
        details = `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã: ${missingBasic.join(', ')}`;
      } else if (existingModules.length === 0) {
        status = 'warning';
        details = '–ë–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã, –º–æ–¥—É–ª–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã';
      } else {
        details = `–ù–∞–π–¥–µ–Ω–æ ${existingModules.length} –º–æ–¥—É–ª–µ–π frontend`;
      }

      this.results.frontend = { status, details, time: Date.now() - start };
    } catch (error) {
      this.results.frontend = {
        status: 'error',
        details: error.message,
        time: Date.now() - start
      };
    }
  }

  async testSecurity() {
    const start = Date.now();
    try {
      const issues = [];
      const port = process.env.PORT || 3001;

      // Test CORS
      try {
        const response = await this.makeRequest(`http://localhost:${port}/api/health`, 'OPTIONS', {
          'Origin': 'http://localhost:3000',
          'Access-Control-Request-Method': 'GET'
        });
        
        if (!response.headers['access-control-allow-origin']) {
          issues.push('CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }
      } catch (error) {
        issues.push('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å CORS');
      }

      // Test .env accessibility
      const envExists = fs.existsSync(path.join(__dirname, '.env'));
      if (envExists) {
        try {
          const frontendPort = process.env.FRONTEND_PORT || 3000;
          const envResponse = await this.makeRequest(`http://localhost:${frontendPort}/.env`, 'GET');
          if (envResponse.statusCode !== 403 && envResponse.statusCode !== 404) {
            issues.push('.env —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–± (–ö–†–ò–¢–ò–ß–ù–û!)');
          }
        } catch (error) {
          // Good - .env should not be accessible
        }
      }

      this.results.security = {
        status: issues.length === 0 ? 'success' : 'warning',
        details: issues.length === 0 ? '–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã' : issues.join('; '),
        time: Date.now() - start
      };
    } catch (error) {
      this.results.security = {
        status: 'warning',
        details: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${error.message}`,
        time: Date.now() - start
      };
    }
  }

  // ============= FEATURE STAGE TESTS =============

  async testAuthentication() {
    const start = Date.now();
    try {
      const port = process.env.PORT || 3001;
      
      // Test auth endpoint exists
      const response = await this.makeRequest(`http://localhost:${port}/api/auth/telegram`, 'POST', {
        'Content-Type': 'application/json'
      }, JSON.stringify({ test: 'data' }));

      let status = 'warning';
      let details = '';

      if (response.statusCode === 404) {
        status = 'error';
        details = 'Auth endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω';
      } else if (response.statusCode === 500) {
        status = 'warning';
        details = 'Auth endpoint –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞';
      } else if (response.statusCode === 400 || response.statusCode === 422) {
        status = 'success';
        details = 'Auth endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ';
      } else {
        details = `Auth endpoint –Ω–∞–π–¥–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.statusCode})`;
      }

      this.results.authentication = { status, details, time: Date.now() - start };
    } catch (error) {
      this.results.authentication = {
        status: 'error',
        details: error.message,
        time: Date.now() - start
      };
    }
  }

  async testTasksCrud() {
    const start = Date.now();
    try {
      const port = process.env.PORT || 3001;
      
      // Test tasks endpoints
      const endpoints = [
        { path: '/api/tasks', method: 'GET' },
        { path: '/api/tasks', method: 'POST' },
      ];

      let workingEndpoints = 0;
      for (const endpoint of endpoints) {
        try {
          const response = await this.makeRequest(`http://localhost:${port}${endpoint.path}`, endpoint.method);
          if (response.statusCode !== 404) {
            workingEndpoints++;
          }
        } catch (error) {
          // Endpoint might be protected, which is OK
        }
      }

      const status = workingEndpoints === endpoints.length ? 'success' : 
                    workingEndpoints > 0 ? 'warning' : 'error';
      const details = `Tasks endpoints: ${workingEndpoints}/${endpoints.length} –Ω–∞–π–¥–µ–Ω—ã`;

      this.results.tasksCrud = { status, details, time: Date.now() - start };
    } catch (error) {
      this.results.tasksCrud = {
        status: 'error',
        details: error.message,
        time: Date.now() - start
      };
    }
  }

  async testAIIntegration() {
    const start = Date.now();
    try {
      const hasAIRoute = this.checkFileExists('backend/routes/ai.js');
      const hasPerplexityKey = !!process.env.PERPLEXITY_API_KEY;
      
      let status = 'error';
      let details = '';

      if (!hasAIRoute) {
        details = 'AI —Ä–æ—É—Ç—ã –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã';
      } else if (!hasPerplexityKey) {
        status = 'warning';
        details = 'AI —Ä–æ—É—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ PERPLEXITY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
      } else {
        status = 'success';
        details = 'AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞';
      }

      this.results.aiIntegration = { status, details, time: Date.now() - start };
    } catch (error) {
      this.results.aiIntegration = {
        status: 'error',
        details: error.message,
        time: Date.now() - start
      };
    }
  }

  async testFileSystem() {
    const start = Date.now();
    try {
      const hasFileRoute = this.checkFileExists('backend/routes/files.js');
      const hasTelegramToken = !!process.env.TELEGRAM_BOT_TOKEN;
      
      let status = 'error';
      let details = '';

      if (!hasFileRoute) {
        details = 'File —Ä–æ—É—Ç—ã –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã';
      } else if (!hasTelegramToken) {
        status = 'warning';
        details = 'File —Ä–æ—É—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
      } else {
        status = 'success';
        details = '–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞';
      }

      this.results.fileSystem = { status, details, time: Date.now() - start };
    } catch (error) {
      this.results.fileSystem = {
        status: 'error',
        details: error.message,
        time: Date.now() - start
      };
    }
  }

  // ============= PRODUCTION STAGE TESTS =============

  async testLoadPerformance() {
    const start = Date.now();
    try {
      const port = process.env.PORT || 3001;
      const requests = 10; // Light load test for dev environment
      const promises = [];

      for (let i = 0; i < requests; i++) {
        promises.push(this.makeRequest(`http://localhost:${port}/api/health`, 'GET'));
      }

      const responses = await Promise.all(promises);
      const avgTime = (Date.now() - start) / requests;
      this.metrics.avgApiTime = avgTime;

      const successCount = responses.filter(r => r.statusCode === 200).length;
      const successRate = (successCount / requests) * 100;

      const status = successRate >= 95 ? 'success' : successRate >= 80 ? 'warning' : 'error';
      const details = `–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç: ${successRate}% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è ${avgTime.toFixed(0)}–º—Å`;

      this.results.loadTesting = { status, details, time: Date.now() - start };
    } catch (error) {
      this.results.loadTesting = {
        status: 'error',
        details: error.message,
        time: Date.now() - start
      };
    }
  }

  async testSecurityScan() {
    const start = Date.now();
    try {
      const issues = [];
      
      // Check for common security files
      if (!this.checkFileExists('.env') && !this.checkFileExists('.env.example')) {
        issues.push('–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      }
      
      // Check if JWT_SECRET is strong
      if (process.env.JWT_SECRET && process.env.JWT_SECRET.length < 32) {
        issues.push('JWT_SECRET —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞)');
      }
      
      // Check for rate limiting middleware
      if (!this.checkFileExists('backend/middleware/rateLimit.js')) {
        issues.push('Rate limiting –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
      }

      const status = issues.length === 0 ? 'success' : issues.length <= 2 ? 'warning' : 'error';
      const details = issues.length === 0 ? '–ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã' : issues.join('; ');

      this.results.securityScan = { status, details, time: Date.now() - start };
    } catch (error) {
      this.results.securityScan = {
        status: 'error',
        details: error.message,
        time: Date.now() - start
      };
    }
  }

  async testDeploymentReadiness() {
    const start = Date.now();
    try {
      const checks = [];
      
      // Environment checks
      if (process.env.NODE_ENV === 'production') {
        checks.push('‚úÖ NODE_ENV=production');
      } else {
        checks.push('‚ö†Ô∏è NODE_ENV –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ production');
      }
      
      // Database URL check
      if (process.env.DATABASE_URL && !process.env.DATABASE_URL.includes('localhost')) {
        checks.push('‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω –ë–î –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
      } else {
        checks.push('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ë–î');
      }
      
      // SSL/Domain check
      if (process.env.FRONTEND_URL && process.env.FRONTEND_URL.includes('https://')) {
        checks.push('‚úÖ HTTPS –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      } else {
        checks.push('‚ö†Ô∏è HTTPS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }

      const warningCount = checks.filter(c => c.includes('‚ö†Ô∏è')).length;
      const status = warningCount === 0 ? 'success' : warningCount <= 1 ? 'warning' : 'error';
      const details = checks.join('; ');

      this.results.deployment = { status, details, time: Date.now() - start };
    } catch (error) {
      this.results.deployment = {
        status: 'error',
        details: error.message,
        time: Date.now() - start
      };
    }
  }

  // ============= HELPER METHODS =============

  checkFileExists(filePath) {
    return fs.existsSync(path.join(__dirname, filePath));
  }

  async checkDatabaseConnection() {
    if (!process.env.DATABASE_URL) return false;
    try {
      const client = new Client({ connectionString: process.env.DATABASE_URL });
      await client.connect();
      await client.query('SELECT 1');
      await client.end();
      return true;
    } catch (error) {
      return false;
    }
  }

  async waitForServer() {
    const port = process.env.PORT || 3001;
    const maxAttempts = 30;
    let attempts = 0;

    while (attempts < maxAttempts) {
      try {
        await this.makeRequest(`http://localhost:${port}/api/health`, 'GET');
        return;
      } catch (error) {
        attempts++;
        await this.sleep(500);
      }
    }
    throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥');
  }

  async makeRequest(url, method = 'GET', headers = {}, body = null) {
    return new Promise((resolve, reject) => {
      const urlObj = new URL(url);
      const options = {
        hostname: urlObj.hostname,
        port: urlObj.port,
        path: urlObj.pathname + urlObj.search,
        method: method,
        headers: headers,
        timeout: 5000
      };

      const req = http.request(options, (res) => {
        let responseBody = '';
        res.on('data', (chunk) => {
          responseBody += chunk;
        });
        res.on('end', () => {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            body: responseBody
          });
        });
      });

      req.on('error', reject);
      req.on('timeout', () => {
        req.destroy();
        reject(new Error('Request timeout'));
      });

      if (body) {
        req.write(body);
      }
      req.end();
    });
  }

  async cleanup() {
    if (this.serverProcess) {
      this.serverProcess.kill('SIGTERM');
      await this.sleep(1000);
      if (!this.serverProcess.killed) {
        this.serverProcess.kill('SIGKILL');
      }
    }
  }

  async sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  getStageDisplayName() {
    const names = {
      early: '–†–ê–ù–ù–Ø–Ø –°–¢–ê–î–ò–Ø (–≠—Ç–∞–ø—ã 1-3)',
      feature: '–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–î–ò–Ø (–≠—Ç–∞–ø—ã 4-6)', 
      production: '–ü–†–û–î–ê–ö–®–ù –°–¢–ê–î–ò–Ø (–≠—Ç–∞–ø—ã 7-10)'
    };
    return names[this.stage] || this.stage;
  }

  getStatusIcon(status) {
    switch (status) {
      case 'success': return '‚úÖ';
      case 'warning': return '‚ö†Ô∏è ';
      case 'error': return '‚ùå';
      default: return '‚è≥';
    }
  }

  getActiveTests() {
    const stageTests = {
      early: ['database', 'server', 'staticFiles', 'healthEndpoint', 'environment', 'security', 'frontend'],
      feature: ['database', 'server', 'staticFiles', 'healthEndpoint', 'environment', 'security', 'frontend', 
                'authentication', 'tasksCrud', 'aiIntegration', 'fileSystem'],
      production: ['database', 'server', 'staticFiles', 'healthEndpoint', 'environment', 'security', 'frontend',
                   'authentication', 'tasksCrud', 'aiIntegration', 'fileSystem', 
                   'loadTesting', 'securityScan', 'deployment']
    };
    return stageTests[this.stage] || stageTests.early;
  }

  getOverallStatus() {
    const activeTests = this.getActiveTests();
    const statuses = activeTests.map(test => this.results[test]?.status).filter(Boolean);
    
    const errorCount = statuses.filter(s => s === 'error').length;
    const warningCount = statuses.filter(s => s === 'warning').length;
    
    if (errorCount > 2) return { icon: 'üî¥', text: '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´' };
    if (errorCount > 0) return { icon: 'üü°', text: '–ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø' };
    if (warningCount > 1) return { icon: 'üü°', text: '–í –û–°–ù–û–í–ù–û–ú –†–ê–ë–û–¢–ê–ï–¢' };
    return { icon: 'üü¢', text: '–í–°–ï –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û' };
  }

  printDetailedReport() {
    const stageEmoji = { early: 'üîß', feature: 'üöÄ', production: 'üè≠' };
    
    console.log(`\n${stageEmoji[this.stage]} –û–¢–ß–ï–¢ –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ –¢–£–î–£–®–ö–ê - ${this.getStageDisplayName()}`);
    console.log('='.repeat(60) + '\n');

    // Group tests by category
    this.printTestCategory('–ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê:', [
      'database', 'server', 'staticFiles', 'healthEndpoint', 'environment', 'security', 'frontend'
    ]);

    if (this.stage === 'feature' || this.stage === 'production') {
      this.printTestCategory('–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:', [
        'authentication', 'tasksCrud', 'aiIntegration', 'fileSystem'
      ]);
    }

    if (this.stage === 'production') {
      this.printTestCategory('–ü–†–û–î–ê–ö–®–ù –ì–û–¢–û–í–ù–û–°–¢–¨:', [
        'loadTesting', 'securityScan', 'deployment'
      ]);
    }

    // Performance metrics
    console.log('\n–ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:');
    console.log(`- –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${(this.metrics.serverStartTime / 1000).toFixed(1)}—Å`);
    console.log(`- –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î: ${this.metrics.dbResponseTime}–º—Å`);
    console.log(`- –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API: ${this.metrics.apiResponseTime}–º—Å`);
    if (this.metrics.avgApiTime > 0) {
      console.log(`- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π: ${this.metrics.avgApiTime.toFixed(0)}–º—Å`);
    }

    // Recommendations
    const recommendations = this.generateSmartRecommendations();
    if (recommendations.length > 0) {
      console.log('\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      recommendations.forEach(rec => console.log(`üîß ${rec}`));
    }

    // Overall status
    const overall = this.getOverallStatus();
    console.log(`\n–û–ë–©–ò–ô –°–¢–ê–¢–£–°: ${overall.icon} ${overall.text}`);
    
    const totalTime = ((Date.now() - this.startTime) / 1000).toFixed(1);
    console.log(`\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: ${totalTime}—Å`);
    console.log(`–¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç–∞–¥–∏–∏: ${this.getStageDisplayName()}`);

    // Progress indicator
    this.printProgressIndicator();

    // Exit with appropriate code
    const activeTests = this.getActiveTests();
    const errorCount = activeTests.filter(test => 
      this.results[test]?.status === 'error'
    ).length;
    process.exit(errorCount > 2 ? 1 : 0);
  }

  printTestCategory(title, tests) {
    console.log(title);
    tests.forEach(testName => {
      const result = this.results[testName];
      if (result && result.status !== 'pending') {
        const icon = this.getStatusIcon(result.status);
        const name = this.getTestDisplayName(testName);
        console.log(`${icon} ${name}: ${result.status.toUpperCase()} (${result.time}–º—Å)`);
        if (result.details) {
          console.log(`   ${result.details}`);
        }
      }
    });
    console.log('');
  }

  printProgressIndicator() {
    const stages = ['early', 'feature', 'production'];
    const currentIndex = stages.indexOf(this.stage);
    
    console.log('\n–ü–†–û–ì–†–ï–°–° –†–ê–ó–†–ê–ë–û–¢–ö–ò:');
    stages.forEach((stage, index) => {
      const emoji = index <= currentIndex ? 'üü¢' : '‚ö™';
      const name = this.getStageDisplayName().split(' (')[0];
      if (stage === this.stage) {
        console.log(`${emoji} ${this.getStageDisplayName()} ‚Üê –¢–ï–ö–£–©–ê–Ø –°–¢–ê–î–ò–Ø`);
      } else {
        console.log(`${emoji} ${stage === 'early' ? '–†–ê–ù–ù–Ø–Ø –°–¢–ê–î–ò–Ø' : 
                          stage === 'feature' ? '–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–î–ò–Ø' : 
                          '–ü–†–û–î–ê–ö–®–ù –°–¢–ê–î–ò–Ø'}`);
      }
    });
  }

  getTestDisplayName(testName) {
    const names = {
      database: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î',
      server: 'Express —Å–µ—Ä–≤–µ—Ä',
      staticFiles: '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã',
      healthEndpoint: 'Health endpoint',
      environment: '–û–∫—Ä—É–∂–µ–Ω–∏–µ',
      security: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
      frontend: 'Frontend —Ñ–∞–π–ª—ã',
      authentication: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
      tasksCrud: 'CRUD –∑–∞–¥–∞—á',
      aiIntegration: 'AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
      fileSystem: '–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞',
      loadTesting: '–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
      securityScan: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
      deployment: '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é'
    };
    return names[testName] || testName;
  }

  generateSmartRecommendations() {
    const recs = [];
    const activeTests = this.getActiveTests();
    
    // Early stage recommendations
    if (this.results.database?.status === 'error') {
      recs.push('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∏ DATABASE_URL');
    }
    if (this.results.database?.status === 'warning') {
      recs.push('–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: npm run migrate');
    }
    if (this.results.environment?.status === 'warning') {
      recs.push('–°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
    }
    
    // Feature stage recommendations
    if (this.stage === 'feature' || this.stage === 'production') {
      if (this.results.authentication?.status === 'error') {
        recs.push('–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å authentication endpoints –≤ routes/auth.js');
      }
      if (this.results.aiIntegration?.status === 'warning') {
        recs.push('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PERPLEXITY_API_KEY –¥–ª—è AI —Ñ—É–Ω–∫—Ü–∏–π');
      }
      if (this.results.fileSystem?.status === 'warning') {
        recs.push('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_BOT_TOKEN –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã');
      }
    }
    
    // Production stage recommendations
    if (this.stage === 'production') {
      if (this.results.securityScan?.status !== 'success') {
        recs.push('–£—Å–∏–ª–∏—Ç—å –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º');
      }
      if (this.results.deployment?.status !== 'success') {
        recs.push('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏–µ (HTTPS, –¥–æ–º–µ–Ω, –ë–î)');
      }
    }
    
    // Stage progression recommendations
    if (this.stage === 'early' && this.getOverallStatus().icon === 'üü¢') {
      recs.push('üéâ –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞–¥–∏—é! –ù–∞—á–∏–Ω–∞–π—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é features');
    }
    if (this.stage === 'feature' && this.getOverallStatus().icon === 'üü¢') {
      recs.push('üéâ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ç–∞–¥–∏–∏! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ production –æ–∫—Ä—É–∂–µ–Ω–∏–µ');
    }
    
    return recs.slice(0, 5); // Limit to 5 most important recommendations
  }
}

// Run tests
if (require.main === module) {
  const tester = new UniversalTudushkaTest();
  tester.run().catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = UniversalTudushkaTest;